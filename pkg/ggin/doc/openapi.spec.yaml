openapi: "3.0.0"
info:
  version: 1.0.0
  title: Genealogical Tree API
  description: A simple family tree example API
  termsOfService: https://github.com/lffranca/genealogicaltree
  contact:
    name: Genealogical Tree
    email: lucasfranca.dev@gmail.com
    url: https://github.com/lffranca/genealogicaltree/issues
  license:
    name: MIT
    url: https://github.com/lffranca/genealogicaltree/blob/master/LICENSE
servers:
  - url: http://localhost:8080/api/v1
paths:
  /person:
    get:
      description: |
        Returns people.
      operationId: findPerson
      responses:
        '200':
          description: person response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
#    post:
#      description: Creates a new pet in the store. Duplicates are allowed
#      operationId: addPet
#      requestBody:
#        description: Pet to add to the store
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/NewPet'
#      responses:
#        '200':
#          description: pet response
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Pet'
#        default:
#          description: unexpected error
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Error'
#  /pets/{id}:
#    get:
#      description: Returns a user based on a single ID, if the user does not have access to the pet
#      operationId: find pet by id
#      parameters:
#        - name: id
#          in: path
#          description: ID of pet to fetch
#          required: true
#          schema:
#            type: integer
#            format: int64
#      responses:
#        '200':
#          description: pet response
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Pet'
#        default:
#          description: unexpected error
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Error'
#    delete:
#      description: deletes a single pet based on the ID supplied
#      operationId: deletePet
#      parameters:
#        - name: id
#          in: path
#          description: ID of pet to delete
#          required: true
#          schema:
#            type: integer
#            format: int64
#      responses:
#        '204':
#          description: pet deleted
#        default:
#          description: unexpected error
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Error'
components:
  schemas:
    Relationship:
      type: object
      required:
        - name
        - relationship
      properties:
        id:
          type: integer
        name:
          type: string
        relationship:
          type: string

    Person:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
        name:
          type: string
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string